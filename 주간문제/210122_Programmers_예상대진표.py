# https://programmers.co.kr/learn/courses/30/lessons/12985

# 10:27 ->11:49

'''
N명이 참가하고 토너먼트 형식으로 진행

2 명끼리 대전 후 이긴 사람이 진출

이긴 사람은 다음 라운드에서 새 번호를 부여

처음 라운드에서 A 번을 가진 참가자가 B번 참가자와 몇 번쨰 라운드에서 만나는지
(A, B가 만날 때 까지 연속적으로 이긴다고 가정할 때)

'''
'''
# 각 수를 2로 나눠보면
1, 2, 3, 4, 5, 6, 7, 8, ... N 
0, 1, 1, 2, 2, 3, 3, 4, ..., 

# 1씩 뺀수를 2로 나눠보면
0, 1, 2, 3, 4, 5, 6, ..., N-1
0, 0, 1, 1, 2, 2, 3, 3, ..., 
-> 두 수가 같으면 경기를 치르게되므로, 만날때까지 반복하면서 카운트
-> 그러나 이렇게 하면 틀림, a에서 1을 계속해서 빼기 때문에 나중에 0에서 중복발생
-> 그래서 빼고 나눈뒤 다시 1을 더하는 방식으로, 0이 발생하지 않도록 하면 통과
# 1씩 더한수를 2로 나눠보면
2, 3, 4, 5, 6, 7, 8, ... N+1
1, 1, 2, 2, 3, 3, ...


'''
# My Solution
def solution(n, a, b):
    count = 0
    while a != b:
        count += 1
        a = (a - 1)//2 + 1
        b = (b - 1)//2 + 1
    return count

# Solution
def solution(n,a,b):
    # answer = 3
    round_count = 0
    while a != b:
        round_count += 1
        a = (a+1)//2
        b = (b+1)//2
    return round_count
